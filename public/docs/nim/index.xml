<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nim on Tutorials</title>
    <link>http://localhost:1313/tutorials/docs/nim/</link>
    <description>Recent content in Nim on Tutorials</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tutorials/docs/nim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Introduction to Nim</title>
      <link>http://localhost:1313/tutorials/docs/nim/nim/nim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/nim/nim/nim/</guid>
      <description>Nim is a relatively new programming language which allows users to write easy-to-read high-performance code.&#xA;Installation • Nim has ready made distributions for all three major operating systems and there are several options when it comes to installing Nim.&#xA;• You can follow the official installation procedure to install the latest stable version.&#xA;• If you’re using Linux, there is a high probability that your distribution has Nim in the package manager.</description>
    </item>
    <item>
      <title>Basic data types in Nim</title>
      <link>http://localhost:1313/tutorials/docs/nim/nim/basic_data_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/nim/nim/basic_data_types/</guid>
      <description>In this section, we will be learning more about basic data types in Nim.&#xA;Integers linkCreate a file called Integers.nim and have the following code:&#xA;let a = 11 b = 4 echo &amp;#34;a &amp;#43; b = &amp;#34;, a &amp;#43; b echo &amp;#34;a - b = &amp;#34;, a - b echo &amp;#34;a * b = &amp;#34;, a * b echo &amp;#34;a / b = &amp;#34;, a / b echo &amp;#34;a div b = &amp;#34;, a div b echo &amp;#34;a mod b = &amp;#34;, a mod b The echo command will print to the screen everything that follows it separated by commas.</description>
    </item>
    <item>
      <title>Channels in Nim</title>
      <link>http://localhost:1313/tutorials/docs/nim/nim/channels_in_nim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/nim/nim/channels_in_nim/</guid>
      <description>Nim provides channels as a mechanism for thread communication. Channels allow threads to send and receive messages in a synchronized manner. Here’s a guide on how to use channels in Nim for thread communication.&#xA;Example with Plain Threads linkFirst, let&amp;rsquo;s look at an example using plain threads. This involves creating and managing threads manually.&#xA;import std/os # for sleep var # create a channel to send/recv strings commChan: Channel[string] sender: Thread[void] recver: Thread[void] proc sendMsg() = sleep(500) # send a message in the channel commChan.</description>
    </item>
    <item>
      <title>Concurrency in Nim</title>
      <link>http://localhost:1313/tutorials/docs/nim/nim/concurrency_in_nim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/nim/nim/concurrency_in_nim/</guid>
      <description>Nim provides concurrency using the async/await syntax, powered by the asyncdispatch module. This allows you to write asynchronous functions that can run concurrently on a single thread, making it especially useful for IO-intensive tasks.&#xA;Key Concepts link Concurrency vs. Parallelism: Concurrency involves managing multiple tasks at the same time, but not necessarily running them simultaneously. Parallelism, on the other hand, means running multiple tasks simultaneously. Nim&amp;rsquo;s async model is focused on concurrency.</description>
    </item>
    <item>
      <title>Containers and Procedures in Nim</title>
      <link>http://localhost:1313/tutorials/docs/nim/nim/containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/nim/nim/containers/</guid>
      <description>Containers linkContainers are data types which contain a collection of items and allow us to access those elements. Typically a container is also iterable, meaning that we can use them the same way we used strings in the loops chapter.&#xA;Arrays linkAn array is the simplest container type. The elements of an array are enclosed inside of square brackets.&#xA;var a: array[3, int] = [5, 7, 9] b = [5, 7, 9] c = [] # error d: array[7, string] If we provide the values, the length and type of array b are known at compile time.</description>
    </item>
    <item>
      <title>Control flow in Nim</title>
      <link>http://localhost:1313/tutorials/docs/nim/nim/control_flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/nim/nim/control_flow/</guid>
      <description>So far in our programs every line of code was executed at some point. Control flow statements allow us to have parts of code which will be executed only if some boolean condition is satisfied.&#xA;If statement link if &amp;lt;condition&amp;gt;: &amp;lt;indented block&amp;gt; If statements can be nested, i.e. inside one if-block there can be another if statement.&#xA;if.nim&#xA;let a = 11 b = 22 c = 999 if a &amp;lt; b: echo &amp;#34;a is smaller than b&amp;#34; if 10*a &amp;lt; b: echo &amp;#34;not only that, a is *much* smaller than b&amp;#34; if b &amp;lt; c: echo &amp;#34;b is smaller than c&amp;#34; if 10*b &amp;lt; c: echo &amp;#34;not only that, b is *much* smaller than c&amp;#34; if a&amp;#43;b &amp;gt; c: echo &amp;#34;a and b are larger than c&amp;#34; if 1 &amp;lt; 100 and 321 &amp;gt; 123: echo &amp;#34;did you know that 1 is smaller than 100?</description>
    </item>
    <item>
      <title>Modules in Nim</title>
      <link>http://localhost:1313/tutorials/docs/nim/nim/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/nim/nim/modules/</guid>
      <description>Modules linkSo far we have used the functionality which is available by default every time we start a new Nim file. This can be extended with modules, which give more functionality for some specific topics.&#xA;Some of the most used Nim modules are:&#xA;strutils: additional functionality when dealing with strings sequtils: additional functionality for sequences math: mathematical functions (logarithms, square roots, …), trigonometry (sin, cos, …) times: measure and deal with time But there are many more, both in what’s called the standard library and in the Nimble package manager.</description>
    </item>
    <item>
      <title>Nim Macros: A Comprehensive Tutorial</title>
      <link>http://localhost:1313/tutorials/docs/nim/nim/nims_marco_system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/nim/nim/nims_marco_system/</guid>
      <description>Macros in Nim are powerful tools that allow you to transform Nim&amp;rsquo;s abstract syntax tree (AST) at compile-time. This tutorial will guide you through the essential concepts and practical applications of Nim&amp;rsquo;s macro system.&#xA;What is a Macro? linkA macro in Nim is a function that executes at compile-time, transforming a Nim syntax tree into a different tree. This capability can be leveraged for various tasks, such as:&#xA;Enhanced Assertions: Implement an assert macro that prints both sides of a comparison if the assertion fails.</description>
    </item>
    <item>
      <title>Object-Oriented Programming in Nim</title>
      <link>http://localhost:1313/tutorials/docs/nim/nim/nims_oop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/nim/nim/nims_oop/</guid>
      <description>Nim supports object-oriented programming (OOP) principles, including member functions (methods), inheritance, and polymorphism. This guide will help you understand how to use these features effectively.&#xA;Member Functions (Methods) linkMember functions, or methods, in Nim can be implemented using procedures (procs). Thanks to the Uniform Function Call Syntax (UFCS), you can call procs as if they were methods.&#xA;type Animal = object name: string age: int proc speak(self: Animal, msg: string) = echo self.</description>
    </item>
    <item>
      <title>Parallelism in Nim</title>
      <link>http://localhost:1313/tutorials/docs/nim/nim/parallelism_in_nim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/nim/nim/parallelism_in_nim/</guid>
      <description>Parallelism in Nim allows you to execute multiple tasks concurrently, leveraging multiple threads. There are several ways to achieve parallelism, including using threads directly or utilizing higher-level abstractions like threadpool.&#xA;Enabling Threads linkBefore using parallelism features, you need to enable threads at compile time:&#xA;nim --threads:on c threads.nim Using Threads Directly link proc sayHi(num: int) {.thread.} = echo &amp;#34;Hi from &amp;#34; &amp;amp; $num var threads: array[10, Thread[int]] for i in threads.</description>
    </item>
  </channel>
</rss>
