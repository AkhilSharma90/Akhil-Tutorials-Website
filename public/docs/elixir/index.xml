<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elixir on Tutorials</title>
    <link>http://localhost:1313/tutorials/docs/elixir/</link>
    <description>Recent content in Elixir on Tutorials</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tutorials/docs/elixir/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A beginner&#39;s guide to the Elixir programming language</title>
      <link>http://localhost:1313/tutorials/docs/elixir/elixir/01_a_beginners_guide_to_elixir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/elixir/elixir/01_a_beginners_guide_to_elixir/</guid>
      <description>In this section, we will cover:&#xA;What is Elixir? Key features, tools, and uses of Elixir Intro to Elixir functional programming Simple code snippets What is Elixir? linkElixir is a general-purpose, functional, concurrent programming language designed for building applications that are reliable, scalable, and easy to maintain. Tt looks a lot like Ruby but offers features that help with handling lots of tasks at the same time (concurrency), recovering from errors quickly (fault tolerance), and low latency.</description>
    </item>
    <item>
      <title>A Deep Dive into Pheonix Framework</title>
      <link>http://localhost:1313/tutorials/docs/elixir/elixir/phoenix_elixix_framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/elixir/elixir/phoenix_elixix_framework/</guid>
      <description>Introduction to Phoenix Framework linkOverview linkPhoenix Framework, crafted in Elixir, stands out in the realm of web development for its exceptional performance, reliability, and scalability. Rooted in the Erlang VM, Phoenix inherits characteristics ideal for building low-latency, distributed, and fault-tolerant systems. This makes it a top choice for applications demanding real-time features.&#xA;Advantages of Using Elixir and Erlang VM linkElixir, the language behind Phoenix, offers remarkable features like lightweight concurrency and fault tolerance, thanks to its Erlang foundation.</description>
    </item>
    <item>
      <title>Build a CLI Todo List using Elixir</title>
      <link>http://localhost:1313/tutorials/docs/elixir/elixir/03_cli_tool_using_elixir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/elixir/elixir/03_cli_tool_using_elixir/</guid>
      <description>This section will guide you throguh creating a basic command-line TODO application. We will explore key conteps and syntac along the way, makin git perfect for people who just started using the language.&#xA;Getting started linkFirst, we should create a new project by running the command&#xA;mix new todo_cli --sup We have already gone through the meaning of --sup in the first tutorial we had.&#xA;Our proejct will consist of four main modules:</description>
    </item>
    <item>
      <title>Concurrency in Elixir with OTP</title>
      <link>http://localhost:1313/tutorials/docs/elixir/elixir/04_concurrency_in_elixir_with_otp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/elixir/elixir/04_concurrency_in_elixir_with_otp/</guid>
      <description>Concurrency is one of the core strengths of Elixir, and the language leverages the powerful capabilities of the Erlang VM to build highly concurrent and fault-tolerant systems. In this section, we will explore concurrency in Elixir using OTP (Open Telecom Platform), which is a set of libraries and design principles for building scalable and maintainable applications.&#xA;Introduction linkWhy Concurrency in Elixer? linkElixir, built on the Erlang VM, is designed for building concurrent, distributed, and fault-tolerant applications.</description>
    </item>
    <item>
      <title>Create A Simple Web Server using Elixir</title>
      <link>http://localhost:1313/tutorials/docs/elixir/elixir/02_creating_a_simple_web_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/elixir/elixir/02_creating_a_simple_web_server/</guid>
      <description>In this lesson, we will build a simple HTTP server from scratch using the PlugCowboy Elixir library. Cowboy is a simple HTTP server for Erlang and Plug will provide us with a connection adapter for the web server.&#xA;Getting started linkAssuming you already have Elixir installed, we will start a simple project by running the command:&#xA;mix new server --sup cd server Note that server is the name of your project, and you can name it however you want.</description>
    </item>
    <item>
      <title>File Word Counter</title>
      <link>http://localhost:1313/tutorials/docs/elixir/elixir/word_count_tool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/elixir/elixir/word_count_tool/</guid>
      <description>This tool will read a text file and count the number of words in it. This project is straightforward and a great way to practice file handling and basic string manipulation in Elixir. You can further adjust this tool to your usecase, like creating your own editor that will have a word count.&#xA;Here&amp;rsquo;s an outline of what we&amp;rsquo;ll cover:&#xA;Overview linkWe&amp;rsquo;ll create a CLI tool named word_counter that reads a specified text file and counts the number of words in it.</description>
    </item>
    <item>
      <title>Testing in Elixir with ExUnit</title>
      <link>http://localhost:1313/tutorials/docs/elixir/elixir/testing_with_elixir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/elixir/elixir/testing_with_elixir/</guid>
      <description>Testing is a crucial aspect of software development that ensures code reliability and correctness. Elixir provides a powerful testing framework, ExUnit, which comes with a rich set of features for writing and running tests. This tutorial will cover the basics of ExUnit, writing test cases, using mocks and stubs, and property-based testing with StreamData.&#xA;Introduction to ExUnit linkExUnit is Elixir&amp;rsquo;s built-in test framework, providing a comprehensive suite of tools to write and execute tests.</description>
    </item>
    <item>
      <title>Using Ecto for Database Interactions</title>
      <link>http://localhost:1313/tutorials/docs/elixir/elixir/password_generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/elixir/elixir/password_generator/</guid>
      <description></description>
    </item>
    <item>
      <title>Using Ecto for Database Interactions</title>
      <link>http://localhost:1313/tutorials/docs/elixir/elixir/using_ecto_for_database_interactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/docs/elixir/elixir/using_ecto_for_database_interactions/</guid>
      <description>Ecto is a powerful database library and toolkit for Elixir, providing a domain-specific language for interacting with databases. This tutorial covers the essentials of using Ecto, from setting up and configuring your database to writing queries and handling data validation with changesets.&#xA;Introduction to Ecto linkEcto is an Elixir library for interacting with databases. It allows you to define schemas, run queries, manage database changes through migrations, and validate data. Ecto supports PostgreSQL, MySQL, SQLite, and other databases.</description>
    </item>
  </channel>
</rss>
